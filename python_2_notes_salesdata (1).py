# -*- coding: utf-8 -*-
"""python_2.notes_Salesdata

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HizPsG7MmfZHNbNT0102ucgC3u29YUVt
"""

#Sales data
import pandas as pd

# Read the file from Colab's working directory
df = pd.read_csv("sales_data123_csv.csv")

# Display first 5 rows
print(df.head())

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Read the file into a DataFrame named `sales`
sales = pd.read_csv("sales_data123_csv.csv")

# Now this will work
sales.head()

sales.head()



"""After we load the data, we find reference in form of -shape, properties of the data we are working with. For example: data columns-date, month, age, etc.

We have idea of entire dataset.
This helps us to get better understanding of the structure- statistical properties. For ex: average age of the customer, Max age, min age of customer.



"""

sales.shape()

sales.shape

sales.info()

sales.describe()

"""We can see std, min,25% etc- this will give generalistic overview of the data

**NUMERICAL ANALYSIS AND VISUALIZATION**
"""



"""We will analyse unit cost column

"""

sales['Unit_Cost'].mean()

sales['Unit_Cost'].median()



sales['Unit_Cost'].min()

sales['Unit_Cost'].plot(kind='box' , vert=False , figsize=(14,6))

"""Your Plot Tells Us:
1. Most Unit Costs are clustered at the lower end:
The box (middle 50% of values) is very small and close to the left (near 0). This means most Unit_Cost values are small.

2. There are many outliers:
The black dots to the right of the box are outliers — unusually high values.

These are prices that are much higher than the typical unit cost.

3. Skewed Distribution:
Since the box is close to the left and there are many outliers on the right, this indicates a right-skewed (positively skewed) distribution.

In Simple Words:
Most products have a low unit cost.

A few products are very expensive, making them outliers.

This might affect averages — so using the median is better for central tendency.
"""

sales['Unit_Cost'].describe()

sales['Unit_Cost'].plot(kind='density', figsize=(14,6))

"""Density plot above>>>"""

ax = sales['Unit_Cost'].plot(kind='density', figsize=(14,6))
ax.axvline(sales['Unit_Cost'].mean(), color='red')
ax.axvline(sales['Unit_Cost'].median(), color='green')

ax = sales['Unit_Cost'].plot(kind='hist' , figsize=(14,6))
ax.set_ylabel('Number of Sales')
ax.set_xlabel('dollars')

"""**CATEGORICAL ANALYSIS AND VISUALIZATIONS**

We will analyse Age_groups
"""

sales.head()
#did that to get quick reference

sales['Age_Group'].value_counts()

sales['Age_Group'].value_counts().plot(kind='pie', figsize= (6,6))

ax = sales['Age_Group'].value_counts().plot(kind='bar', figsize=(14,6))
ax.set_ylabel('Number of Sales')
ax.set_xlabel('Age_Group')

ax = sales['Age_Group'].value_counts().plot(kind='bar', figsize=(14,6))
ax.set_ylabel('Number of Sales')

"""**Relationship between Columns-**
Correlation Analysis

Can we find any significant relationships?
"""

corr = sales.corr()
corr

corr = sales.select_dtypes(include=['number']).corr()
corr



fig = plt.figure(figsize=(8,8))

plt.matshow(corr, cmap='RdBu', fignum=fig.number)

plt.xticks(range(len(corr.columns)), corr.columns, rotation ='vertical')
plt.yticks(range(len(corr.columns)), corr.columns)

fig = plt.figure(figsize=(8,8))

plt.matshow(corr, cmap='RdBu')  # ❌ no need for fignum here

plt.xticks(range(len(corr.columns)), corr.columns, rotation='vertical')
plt.yticks(range(len(corr.columns)), corr.columns)

plt.colorbar()  # (optional) adds the color legend
plt.title('Correlation Heatmap', pad=20)

sales.plot(kind= 'scatter', x='Customer_Age', y='Revenue', figsize=(6,6))
#

sales.plot(kind= 'scatter', x='Revenue', y='Profit', figsize=(6,6), alpha=0.2)

boxplot_cols = ['Year', 'Customer_Age', 'Order_Quantity', 'Unit_Cost', 'Unit_Price', 'Profit']
sales[boxplot_cols].plot(kind='box', subplots = True, layout = (2,3), figsize=(14,8))



"""**COLUMN WRANGLING**

Column wrangling is a part of data wrangling, and it means cleaning, transforming, or restructuring the columns in your dataset to make them more useful or meaningful for analysis.

Think of it like tidying up and organizing the headings and structure of an Excel sheet — but in Python (using pandas).

We can create:
New columns or
Modify existing ones

Add and create- Revenue_per_Age column:

his new column helps you answer:

"How much revenue does each customer generate per year of age?"

Nice insight for comparing customer efficiency!
"""

sales[Revenue_per_Age] = sales['Revenue'] / sales['Customer_Age']
sales['Revenue_per_Age'].head()



sales['Revenue_per_Age'] = sales['Revenue'] / sales['Customer_Age']

sales['Revenue_per_Age'].head()

sales['Revenue_per_Age'].plot(kind='density', figsize=(14,6))

sales['Revenue_per_Age'].plot(kind='hist', figsize=(14,6))



"""**NEW COLUMN: CALCULATED COST**

Caclculated_Cost = Order_Quantity*Unit_Cost
"""

sales['Calculated_Cost'] = sales['Order_Quantity'] * sales['Unit_Cost']
sales['Calculated_Cost'].head()

(sales['Calculated_Cost'] != sales['Cost']).sum()

"""We can see a relationship between Cost & Profit using Scatter plot"""

sales.plot(kind='scatter', x='Calculated_Cost', y='Profit', figsize=(6,6))



"""ADD A NEW COLUMN: **CALCULATED REVENUE**

Calculated_Revenue

Calculated Revenue= Cost + Profit
"""

sales['Calculated_Revenue']= sales['Cost'] + sales['Profit']

sales['Calculated_Revenue'].head()

sales['Calculated_Revenue'] != sales['Revenue'].sum()

(sales['Calculated_Revenue'] != sales['Revenue']).sum()

sales.head()

sales['Revenue'].plot(kind='hist', bins=100, figsize=(14,6))

"""**Modify all the Unit_Price by adding 3% tax to them**"""

sales['Unit_Price'].head()

#Formula: sales['Unit_Price'] = sales['Unit_Price] *1.03
sales['Unit_Price'] = sales['Unit_Price'] * 1.03
sales['Unit_Price'].head()

"""**SELECTION AND INDEXING**

Get all the sales made in the State of Kentucky
"""

sales.loc[sales['State'] == 'Kentucky']

"""Get the mean revenue of all adults- aged (35-64) age group"""

sales.loc[sales['Age_Group'] == 'Adults (35-64)']['Revenue'].mean()
#



"""How many records belong to Age Group Youth (<25) or Adults (35 - 64)

"""

sales.loc[sales.Age_Group.isin(['Youth (<25)', 'Adults (35-64)'])].shape

sales.loc[(sales['Age_Group'] == 'Youth (<25)') | (sales['Age_Group'] == 'Adults (35-64)')].shape

"""**Get the mean revenue of the Sales group- Adults (35-64) in United States**"""

sales.loc[(sales['Age_Group'] == 'Adults (35-64)') & (sales['Country'] == 'United States')]['Revenue'].mean()

"""Increase the Sales by 10% to : Revenue in France"""

sales.loc[sales['Country'] == 'France', 'Revenue'] = sales.loc[sales['Country'] == 'France', 'Revenue'] * 1.1

#Increase the Sales by 10% to : Revenue in France
# Option 1: Convert the Revenue column to float permanently
sales['Revenue'] = sales['Revenue'].astype(float)

# Then apply the update
sales.loc[sales['Country'] == 'France', 'Revenue'] *= 1.1

sales.loc[sales['Country'] == 'France', 'Revenue'].head()

import pandas as pd
from google.colab import files
uploaded = files.upload()

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

sales = pd.read_csv("sales_data123_csv.csv")
sales.head()

corr = sales.select_dtypes(include=['number']).corr()
corr

sales['Calculated_Cost'] = sales['Order_Quantity'] * sales['Unit_Cost']
sales['Calculated_Cost'].head()

sales['Revenue_per_Age'] = sales['Revenue'] / sales['Customer_Age']
sales['Revenue_per_Age'].head()

sales['Calculated_Revenue']= sales['Cost'] + sales['Profit']

sales['Calculated_Revenue'].head()

sales['Unit_Price'].head()
#modify unit price

#Formula: sales['Unit_Price'] = sales['Unit_Price] *1.03
sales['Unit_Price'] = sales['Unit_Price'] * 1.03
sales['Unit_Price'].head()

"""Get all the sales made in the State of Kentucky

"""

sales.loc[sales['State'] == 'Kentucky']

sales.loc[sales['Age_Group'] == 'Adults (35-64)']['Revenue'].mean()
#

#Increase the Sales by 10% to : Revenue in France
# Option 1: Convert the Revenue column to float permanently
sales['Revenue'] = sales['Revenue'].astype(float)

# Then apply the update
sales.loc[sales['Country'] == 'France', 'Revenue'] *= 1.1

sales.loc[sales['Country'] == 'France', 'Revenue'].head()

"""To download the modified DataFrame (e.g. filtered data for the full sales data with any changes) as an Excel file from Google Colab, follow these steps:"""

!pip install openpyxl

sales.to_excel("modified_sales_data.xlsx", index=False)

from google.colab import files
files.download("modified_sales_data.xlsx")  #  use "modified_sales_data.xlsx"

sales.to_csv("modified_sales_data.csv", index=False)
from google.colab import files
files.download("modified_sales_data.csv")